#![deny(rustdoc::broken_intra_doc_links)]
#![deny(rustdoc::private_intra_doc_links)]
#![cfg_attr(coverage_nightly, feature(coverage_attribute))]

use aoc_leaderbot_aws_lib::leaderbot::storage::aws::dynamodb::DynamoDbStorage;
use aws_config::BehaviorVersion;
use clap::Parser;
use dotenvy::dotenv;

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let _ = dotenv();

    let cli = Cli::parse();

    let storage = get_storage(&cli).await;
    storage.create_table().await?;

    Ok(())
}

async fn get_storage(cli: &Cli) -> DynamoDbStorage {
    if cli.test_endpoint_url.is_empty() {
        DynamoDbStorage::new(&cli.table_name).await
    } else {
        let config = aws_config::defaults(BehaviorVersion::latest())
            .region("ca-central-1")
            .test_credentials()
            .endpoint_url(&cli.test_endpoint_url)
            .load()
            .await;
        DynamoDbStorage::with_config(&config, &cli.table_name).await
    }
}

use cli::Cli;

// It seems some code generated by `clap` is flagged as not covered by tests,
// but I don't know how to cover them, so I'll move the struct to a "no coverage" module.
#[cfg_attr(coverage_nightly, coverage(off))]
mod cli {
    use aoc_leaderbot_aws_lambda_impl::leaderbot::DEFAULT_DYNAMODB_TABLE_NAME;

    use super::*;

    #[derive(Debug, Parser)]
    #[command(version, about = "Prepare DynamoDB table for aoc_leaderbot", long_about = None)]
    pub struct Cli {
        /// Name of DynamoDB table to use for leaderboard data
        #[arg(short, long, default_value_t = DEFAULT_DYNAMODB_TABLE_NAME.into())]
        pub table_name: String,

        /// Test endpoint URL. Used by tests only, not shown in help
        #[arg(long, hide = true, default_value_t)]
        pub test_endpoint_url: String,
    }
}

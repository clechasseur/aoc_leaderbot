name: CI

on:
  push:
  workflow_dispatch:

env:
  CI: 1

jobs:
  clippy:
    name: Clippy validation
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Rust with clippy
        uses: actions-rust-lang/setup-rust-toolchain@11df97af8e8102fd60b60a77dfbf58d40cd843b8 # v1.10.1
        with:
          toolchain: stable
          components: clippy
          cache: false

      - name: Rust Cache
        uses: Swatinem/rust-cache@f0deed1e0edfc6a9be95417288c0e1099b1eeec3 # v2.7.7
        with:
          prefix-key: v2-rust
          cache-on-failure: true

      - name: Run clippy
        uses: clechasseur/rs-clippy-check@23f6dcf86d7e4e0d98b000bba0bb81ac587c44aa # v4.0.2
        with:
          args: --workspace --all-targets --feature-powerset -- -D warnings
          tool: cargo-hack
          cache-key: v1-aoc_leaderbot-clippy

  fmt:
    name: Rustfmt check
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Rust nightly with rustfmt
        uses: actions-rust-lang/setup-rust-toolchain@11df97af8e8102fd60b60a77dfbf58d40cd843b8 # v1.10.1
        with:
          toolchain: nightly
          components: rustfmt
          cache: false

      - name: Run Rustfmt
        uses: clechasseur/rs-fmt-check@e1bd0f5c24ced02542ed905bde212ffc9c324863 # v2.0.8
        with:
          args: --all

  msrv-check:
    name: MSRV check of ${{ matrix.package }} for Rust ${{ matrix.toolchain }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        package: [ "aoc_leaderboard", "aoc_leaderbot_test_helpers", "aoc_leaderbot_lib", "aoc_leaderbot_aws_lib", "aoc_leaderbot_slack_lib" ]
        os: [ ubuntu-24.04, macos-14, windows-2022 ]
        include:
          - toolchain: invalid
          - package: "aoc_leaderboard"
            toolchain: 1.70.0
          - package: "aoc_leaderbot_test_helpers"
            toolchain: 1.70.0
          - package: "aoc_leaderbot_lib"
            toolchain: 1.75.0
          - package: "aoc_leaderbot_aws_lib"
            toolchain: 1.81.0
          - package: "aoc_leaderbot_slack_lib"
            toolchain: 1.75.0
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Rust nightly and ${{ matrix.toolchain }}
        uses: actions-rust-lang/setup-rust-toolchain@11df97af8e8102fd60b60a77dfbf58d40cd843b8 # v1.10.1
        with:
          toolchain: nightly,${{ matrix.toolchain }}
          cache: false

      - name: Rust Cache
        uses: Swatinem/rust-cache@f0deed1e0edfc6a9be95417288c0e1099b1eeec3 # v2.7.7
        with:
          prefix-key: v9-rust
          key: package-${{ matrix.package }}-msrv-pins-files-${{ hashFiles('**/msrv-pins.toml') }}
          cache-on-failure: true

      - name: Install required tools
        uses: taiki-e/install-action@dccf3df6e0d23d1cceb188bbc2255dd0799bcf48 # v2.49.8
        with:
          tool: just,cargo-hack,cargo-minimal-versions,cargo-msrv-prep
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run checks using cargo-minimal-versions
        run: just toolchain=${{ matrix.toolchain }} package=${{ matrix.package }} check-minimal

  build:
    name: Build for Rust ${{ matrix.toolchain }}${{ matrix.experimental && ' (experimental)' || '' }} on ${{ matrix.os }}${{ matrix.ignore-lock && ' without Cargo.lock' || '' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ 1.81.0, stable, beta, nightly ]
        os: [ ubuntu-24.04, macos-14, windows-2022 ]
        ignore-lock: [ false, true ]
        include:
          - experimental: false
          - toolchain: beta
            experimental: true
          - toolchain: nightly
            experimental: true
        exclude:
          - toolchain: 1.81.0
            ignore-lock: true
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Remove Cargo.lock
        if: ${{ matrix.ignore-lock }}
        run: rm Cargo.lock

      - name: Install Rust ${{ matrix.toolchain }}
        uses: actions-rust-lang/setup-rust-toolchain@11df97af8e8102fd60b60a77dfbf58d40cd843b8 # v1.10.1
        with:
          toolchain: ${{ matrix.toolchain }}
          cache: false

      - name: Rust Cache
        if: ${{ !matrix.experimental }}
        uses: Swatinem/rust-cache@f0deed1e0edfc6a9be95417288c0e1099b1eeec3 # v2.7.7
        with:
          prefix-key: v3-rust
          key: ignore-lock-${{ matrix.ignore-lock }}
          cache-on-failure: true

      - name: Install required tools
        uses: taiki-e/install-action@dccf3df6e0d23d1cceb188bbc2255dd0799bcf48 # v2.49.8
        with:
          tool: just,cargo-hack
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker images
        if: ${{ startsWith(matrix.os, 'ubuntu-') }}
        uses: ScribeMD/docker-cache@fb28c93772363301b8d0a6072ce850224b73f74e # v0.5.0
        with:
          key: docker-v0-${{ runner.os }}-${{ hashFiles('**/.dockerignore', '**/Dockerfile*', '**/docker-compose*.yml') }}

      - name: Start DB Docker containers
        if: ${{ startsWith(matrix.os, 'ubuntu-') }}
        uses: hoverkraft-tech/compose-action@8be2d741e891ac9b8ac20825e6f3904149599925 # v2.2.0
        with:
          down-flags: '--volumes'

      - name: Run checks on feature powerset
        run: just check-powerset

      - name: Run tests
        run: just test

  llvm-cov:
    name: Code coverage with llvm-cov
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Rust nightly
        uses: actions-rust-lang/setup-rust-toolchain@11df97af8e8102fd60b60a77dfbf58d40cd843b8 # v1.10.1
        with:
          toolchain: nightly
          cache: false

      - name: Install required tools
        uses: taiki-e/install-action@dccf3df6e0d23d1cceb188bbc2255dd0799bcf48 # v2.49.8
        with:
          tool: just,cargo-llvm-cov
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker images
        uses: ScribeMD/docker-cache@fb28c93772363301b8d0a6072ce850224b73f74e # v0.5.0
        with:
          key: docker-v0-${{ runner.os }}-${{ hashFiles('**/.dockerignore', '**/Dockerfile*', '**/docker-compose*.yml') }}

      - name: Start DB Docker containers
        uses: hoverkraft-tech/compose-action@8be2d741e891ac9b8ac20825e6f3904149599925 # v2.2.0
        with:
          down-flags: '--volumes'

      - name: Run cargo-llvm-cov
        run: just llvm-cov

      - name: Upload code coverage results to codecov.io
        uses: codecov/codecov-action@0565863a31f2c772f9f0395002a31e3f06189574 # v5.4.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: codecov.json
          fail_ci_if_error: true

      - name: Archive code coverage results
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: llvm-cov-code-coverage-report
          path: |
            codecov.json
            target/llvm-cov/html/

  doc:
    name: Rustdoc check for Rust ${{ matrix.toolchain }}${{ matrix.experimental && ' (experimental)' || '' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ stable, nightly ]
        include:
          - experimental: false
          - toolchain: nightly
            experimental: true
    runs-on: ubuntu-24.04
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Rust ${{ matrix.toolchain }}
        uses: actions-rust-lang/setup-rust-toolchain@11df97af8e8102fd60b60a77dfbf58d40cd843b8 # v1.10.1
        with:
          toolchain: ${{ matrix.toolchain }}
          cache: false

      - name: Rust Cache
        if: ${{ !matrix.experimental }}
        uses: Swatinem/rust-cache@f0deed1e0edfc6a9be95417288c0e1099b1eeec3 # v2.7.7
        with:
          prefix-key: v2-rust
          cache-targets: false
          cache-on-failure: true

      - name: Install just
        uses: taiki-e/install-action@dccf3df6e0d23d1cceb188bbc2255dd0799bcf48 # v2.49.8
        with:
          tool: just
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate doc using rustdoc
        run: just doc
